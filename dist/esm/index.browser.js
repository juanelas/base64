const base64Encode = (bytes) => {
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < bytes.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, bytes.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(arr.join(''));
};
const base64Decode = (encoded) => {
    return new Uint8Array(atob(encoded)
        .split('')
        .map((c) => c.charCodeAt(0)));
};

function encode(input, urlsafe = false, padding = true) {
    let base64 = '';
    {
        const bytes = (typeof input === 'string')
            ? (new TextEncoder()).encode(input)
            : new Uint8Array(input);
        base64 = base64Encode(bytes);
    }
    if (urlsafe)
        base64 = base64ToBase64url(base64);
    if (!padding)
        base64 = removeBase64Padding(base64);
    return base64;
}
function decode(base64, stringOutput = false) {
    {
        let urlsafe = false;
        if (/^[0-9a-zA-Z_-]+={0,2}$/.test(base64)) {
            urlsafe = true;
        }
        else if (!/^[0-9a-zA-Z+/]*={0,2}$/.test(base64)) {
            throw new Error('Not a valid base64 input');
        }
        if (urlsafe)
            base64 = base64urlToBase64(base64);
        const bytes = base64Decode(base64);
        return stringOutput
            ? (new TextDecoder()).decode(bytes)
            : bytes;
    }
}
function base64ToBase64url(base64) {
    return base64.replace(/\+/g, '-').replace(/\//g, '_');
}
function base64urlToBase64(base64url) {
    return base64url.replace(/-/g, '+').replace(/_/g, '/').replace(/=/g, '');
}
function removeBase64Padding(str) {
    return str.replace(/=/g, '');
}

export { decode, encode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL2Jyb3dzZXItYmFzZTY0LnRzIiwiLi4vLi4vc3JjL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBiYXNlNjRFbmNvZGUgPSAoYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBDSFVOS19TSVpFID0gMHg4MDAwXG4gIGNvbnN0IGFyciA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IENIVU5LX1NJWkUpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgYXJyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBieXRlcy5zdWJhcnJheShpLCBpICsgQ0hVTktfU0laRSkpKVxuICB9XG4gIHJldHVybiBidG9hKGFyci5qb2luKCcnKSlcbn1cblxuZXhwb3J0IGNvbnN0IGJhc2U2NERlY29kZSA9IChlbmNvZGVkOiBzdHJpbmcpOiBVaW50OEFycmF5ID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgIGF0b2IoZW5jb2RlZClcbiAgICAgIC5zcGxpdCgnJylcbiAgICAgIC5tYXAoKGMpID0+IGMuY2hhckNvZGVBdCgwKSlcbiAgKVxufVxuIiwiLyoqXG4gKiBCYXNlNjR1cmwgZm9yIGJvdGggbm9kZS5qcyBhbmQgYnJ3c2VyIGphdmFzY3JpcHQuIEl0IGNhbiB3b3JrIHdpdGggQXJyYXlCdWZmZXJ8VHlwZWRBcnJheXxCdWZmZXJcbiAqXG4gKiBAcmVtYXJrcyBCb3dzZXIgY29kZSBvYnRhaW5lZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wYW52YS9qb3NlL2Jsb2IvbWFpbi9zcmMvcnVudGltZS9icm93c2VyL2Jhc2U2NHVybC50c1xuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHsgYmFzZTY0RW5jb2RlLCBiYXNlNjREZWNvZGUgfSBmcm9tICcuL2Jyb3dzZXItYmFzZTY0LmpzJ1xuXG4vKipcbiAqIEEgVHlwZWRBcnJheSBvYmplY3QgZGVzY3JpYmVzIGFuIGFycmF5LWxpa2UgdmlldyBvZiBhbiB1bmRlcmx5aW5nIGJpbmFyeSBkYXRhIGJ1ZmZlci5cbiAqL1xuZXhwb3J0IHR5cGUgVHlwZWRBcnJheSA9IEludDhBcnJheSB8IFVpbnQ4QXJyYXkgfCBVaW50OENsYW1wZWRBcnJheSB8IEludDE2QXJyYXkgfCBVaW50MTZBcnJheSB8IEludDMyQXJyYXkgfCBVaW50MzJBcnJheSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSB8IEJpZ0ludDY0QXJyYXkgfCBCaWdVaW50NjRBcnJheVxuXG4vKipcbiAqIEJhc2U2NFVybCBlbmNvZGluZyBvZiBhIGJ1ZmZlciBpbnB1dCBvciBhIHN0cmluZyAoVVRGMTYgaW4gYnJvd3NlcnMsIFVURjggaW4gbm9kZSlcbiAqIEBwYXJhbSBpbnB1dFxuICogQHBhcmFtIHVybHNhZmUgLSBpZiB0cnVlIEJhc2U2NCBVUkwgZW5jb2RpbmcgaXMgdXNlZCAoJysnIGFuZCAnLycgYXJlIHJlcGxhY2VkIGJ5ICctJywgJ18nKVxuICogQHBhcmFtIHBhZGRpbmcgLSBpZiBmYWxzZSwgcGFkZGluZyAodHJhaWxpbmcgJz0nKSBpcyByZW1vdmVkXG4gKiBAcmV0dXJucyBhIHN0cmluZyB3aXRoIHRoZSBiYXNlNjQtZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZSAoaW5wdXQ6IEFycmF5QnVmZmVyTGlrZSB8IFR5cGVkQXJyYXkgfCBCdWZmZXIgfCBzdHJpbmcsIHVybHNhZmU6IGJvb2xlYW4gPSBmYWxzZSwgcGFkZGluZzogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICBsZXQgYmFzZTY0ID0gJydcbiAgaWYgKElTX0JST1dTRVIpIHtcbiAgICBjb25zdCBieXRlcyA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuICAgICAgPyAobmV3IFRleHRFbmNvZGVyKCkpLmVuY29kZShpbnB1dClcbiAgICAgIDogbmV3IFVpbnQ4QXJyYXkoaW5wdXQpXG4gICAgYmFzZTY0ID0gYmFzZTY0RW5jb2RlKGJ5dGVzKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpXG4gICAgICA/IEJ1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpXG4gICAgICA6IEJ1ZmZlci5mcm9tKGlucHV0KVxuICAgIGJhc2U2NCA9IGJ5dGVzLnRvU3RyaW5nKCdiYXNlNjQnKVxuICB9XG4gIGlmICh1cmxzYWZlKSBiYXNlNjQgPSBiYXNlNjRUb0Jhc2U2NHVybChiYXNlNjQpXG4gIGlmICghcGFkZGluZykgYmFzZTY0ID0gcmVtb3ZlQmFzZTY0UGFkZGluZyhiYXNlNjQpXG4gIHJldHVybiBiYXNlNjRcbn1cblxuLyoqXG4gKiBCYXNlNjR1cmwgZGVjb2RpbmcgKGJpbmFyeSBvdXRwdXQpIG9mIGJhc2U2NHVybC1lbmNvZGVkIHN0cmluZ1xuICogQHBhcmFtIGJhc2U2NCAtIGEgYmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHN0cmluZ091dHB1dCAtIGlmIHRydWUgYSBVVEYxNiAoYnJvd3Nlcikgb3IgVVRGOCAobm9kZSkgc3RyaW5nIGlzIHJldHVybmVkXG4gKiBAcmV0dXJucyBhIGJ1ZmZlciBvciB1bmljb2RlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZyk6IFVpbnQ4QXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUgKGJhc2U2NDogc3RyaW5nLCBzdHJpbmdPdXRwdXQ6IHVuZGVmaW5lZCk6IFVpbnQ4QXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUgKGJhc2U2NDogc3RyaW5nLCBzdHJpbmdPdXRwdXQ6IGZhbHNlKTogVWludDhBcnJheVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZSAoYmFzZTY0OiBzdHJpbmcsIHN0cmluZ091dHB1dDogdHJ1ZSk6IHN0cmluZ1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZSAoYmFzZTY0OiBzdHJpbmcsIHN0cmluZ091dHB1dDogYm9vbGVhbik6IFVpbnQ4QXJyYXkgfCBzdHJpbmdcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUgKGJhc2U2NDogc3RyaW5nLCBzdHJpbmdPdXRwdXQ6IHVuZGVmaW5lZCB8IGJvb2xlYW4gPSBmYWxzZSk6IFVpbnQ4QXJyYXkgfCBzdHJpbmcge1xuICBpZiAoSVNfQlJPV1NFUikge1xuICAgIGxldCB1cmxzYWZlID0gZmFsc2VcbiAgICBpZiAoL15bMC05YS16QS1aXy1dKz17MCwyfSQvLnRlc3QoYmFzZTY0KSkge1xuICAgICAgdXJsc2FmZSA9IHRydWVcbiAgICB9IGVsc2UgaWYgKCEvXlswLTlhLXpBLVorL10qPXswLDJ9JC8udGVzdChiYXNlNjQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIGJhc2U2NCBpbnB1dCcpXG4gICAgfVxuICAgIGlmICh1cmxzYWZlKSBiYXNlNjQgPSBiYXNlNjR1cmxUb0Jhc2U2NChiYXNlNjQpXG4gICAgY29uc3QgYnl0ZXMgPSBiYXNlNjREZWNvZGUoYmFzZTY0KVxuICAgIHJldHVybiBzdHJpbmdPdXRwdXRcbiAgICAgID8gKG5ldyBUZXh0RGVjb2RlcigpKS5kZWNvZGUoYnl0ZXMpXG4gICAgICA6IGJ5dGVzXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYmFzZTY0LCAnYmFzZTY0JylcbiAgICByZXR1cm4gc3RyaW5nT3V0cHV0XG4gICAgICA/IGJ1ZmZlci50b1N0cmluZygndXRmOCcpXG4gICAgICA6IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0LCBidWZmZXIubGVuZ3RoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQmFzZTY0dXJsIChiYXNlNjQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBiYXNlNjQucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJylcbn1cblxuZnVuY3Rpb24gYmFzZTY0dXJsVG9CYXNlNjQgKGJhc2U2NHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGJhc2U2NHVybC5yZXBsYWNlKC8tL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpLnJlcGxhY2UoLz0vZywgJycpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUJhc2U2NFBhZGRpbmcgKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC89L2csICcnKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFPLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBaUIsS0FBWTtJQUN4RCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUE7SUFDekIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsSUFBQSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksVUFBVSxFQUFFO1FBRWpELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDN0UsS0FBQTtJQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMzQixDQUFDLENBQUE7QUFFTSxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsS0FBZ0I7QUFDMUQsSUFBQSxPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ1YsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUNULFNBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQTtBQUNILENBQUM7O0FDS0ssU0FBVSxNQUFNLENBQUUsS0FBcUQsRUFBRSxPQUFtQixHQUFBLEtBQUssRUFBRSxPQUFBLEdBQW1CLElBQUksRUFBQTtJQUM5SCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7QUFDZixJQUFnQjtBQUNkLFFBQUEsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRO2NBQ3BDLENBQUMsSUFBSSxXQUFXLEVBQUUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ25DLGNBQUUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDekIsUUFBQSxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdCLEtBS0E7QUFDRCxJQUFBLElBQUksT0FBTztBQUFFLFFBQUEsTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQy9DLElBQUEsSUFBSSxDQUFDLE9BQU87QUFBRSxRQUFBLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNsRCxJQUFBLE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztTQWFlLE1BQU0sQ0FBRSxNQUFjLEVBQUUsZUFBb0MsS0FBSyxFQUFBO0FBQy9FLElBQWdCO1FBQ2QsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFBO0FBQ25CLFFBQUEsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekMsT0FBTyxHQUFHLElBQUksQ0FBQTtBQUNmLFNBQUE7QUFBTSxhQUFBLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7QUFDakQsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUE7QUFDNUMsU0FBQTtBQUNELFFBQUEsSUFBSSxPQUFPO0FBQUUsWUFBQSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDL0MsUUFBQSxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDbEMsUUFBQSxPQUFPLFlBQVk7Y0FDZixDQUFDLElBQUksV0FBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQztjQUNqQyxLQUFLLENBQUE7QUFDVixLQUtBO0FBQ0gsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUUsTUFBYyxFQUFBO0FBQ3hDLElBQUEsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZELENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLFNBQWlCLEVBQUE7SUFDM0MsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDMUUsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUUsR0FBVyxFQUFBO0lBQ3ZDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDOUI7Ozs7In0=
