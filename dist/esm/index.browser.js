const base64Encode = (bytes) => {
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < bytes.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, bytes.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(arr.join(''));
};
const base64Decode = (encoded) => {
    return new Uint8Array(atob(encoded)
        .split('')
        .map((c) => c.charCodeAt(0)));
};

function encode(input, urlsafe = false, padding = true) {
    let base64 = '';
    {
        const bytes = (typeof input === 'string')
            ? (new TextEncoder()).encode(input)
            : new Uint8Array(input);
        base64 = base64Encode(bytes);
    }
    if (urlsafe)
        base64 = base64ToBase64url(base64);
    if (!padding)
        base64 = removeBase64Padding(base64);
    return base64;
}
function decode(base64, stringOutput = false) {
    {
        let urlsafe = false;
        if (/^[0-9a-zA-Z_-]+={0,2}$/.test(base64)) {
            urlsafe = true;
        }
        else if (!/^[0-9a-zA-Z+/]*={0,2}$/.test(base64)) {
            throw new Error('Not a valid base64 input');
        }
        if (urlsafe)
            base64 = base64urlToBase64(base64);
        const bytes = base64Decode(base64);
        return stringOutput
            ? (new TextDecoder()).decode(bytes)
            : bytes;
    }
}
function base64ToBase64url(base64) {
    return base64.replace(/\+/g, '-').replace(/\//g, '_');
}
function base64urlToBase64(base64url) {
    return base64url.replace(/-/g, '+').replace(/_/g, '/').replace(/=/g, '');
}
function removeBase64Padding(str) {
    return str.replace(/=/g, '');
}

export { decode, encode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL2Jyb3dzZXItYmFzZTY0LnRzIiwiLi4vLi4vc3JjL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBiYXNlNjRFbmNvZGUgPSAoYnl0ZXM6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBDSFVOS19TSVpFID0gMHg4MDAwXG4gIGNvbnN0IGFyciA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IENIVU5LX1NJWkUpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgYXJyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBieXRlcy5zdWJhcnJheShpLCBpICsgQ0hVTktfU0laRSkpKVxuICB9XG4gIHJldHVybiBidG9hKGFyci5qb2luKCcnKSlcbn1cblxuZXhwb3J0IGNvbnN0IGJhc2U2NERlY29kZSA9IChlbmNvZGVkOiBzdHJpbmcpOiBVaW50OEFycmF5ID0+IHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgIGF0b2IoZW5jb2RlZClcbiAgICAgIC5zcGxpdCgnJylcbiAgICAgIC5tYXAoKGMpID0+IGMuY2hhckNvZGVBdCgwKSlcbiAgKVxufVxuIiwiLyoqXG4gKiBCYXNlNjR1cmwgZm9yIGJvdGggbm9kZS5qcyBhbmQgYnJ3c2VyIGphdmFzY3JpcHQuIEl0IGNhbiB3b3JrIHdpdGggQXJyYXlCdWZmZXJ8VHlwZWRBcnJheXxCdWZmZXJcbiAqXG4gKiBAcmVtYXJrcyBCb3dzZXIgY29kZSBvYnRhaW5lZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wYW52YS9qb3NlL2Jsb2IvbWFpbi9zcmMvcnVudGltZS9icm93c2VyL2Jhc2U2NHVybC50c1xuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHsgYmFzZTY0RW5jb2RlLCBiYXNlNjREZWNvZGUgfSBmcm9tICcuL2Jyb3dzZXItYmFzZTY0LmpzJ1xuXG4vKipcbiAqIEEgVHlwZWRBcnJheSBvYmplY3QgZGVzY3JpYmVzIGFuIGFycmF5LWxpa2UgdmlldyBvZiBhbiB1bmRlcmx5aW5nIGJpbmFyeSBkYXRhIGJ1ZmZlci5cbiAqL1xuZXhwb3J0IHR5cGUgVHlwZWRBcnJheSA9IEludDhBcnJheSB8IFVpbnQ4QXJyYXkgfCBVaW50OENsYW1wZWRBcnJheSB8IEludDE2QXJyYXkgfCBVaW50MTZBcnJheSB8IEludDMyQXJyYXkgfCBVaW50MzJBcnJheSB8IEZsb2F0MzJBcnJheSB8IEZsb2F0NjRBcnJheSB8IEJpZ0ludDY0QXJyYXkgfCBCaWdVaW50NjRBcnJheVxuXG4vKipcbiAqIEJhc2U2NFVybCBlbmNvZGluZyBvZiBhIGJ1ZmZlciBpbnB1dCBvciBhIHN0cmluZyAoVVRGMTYgaW4gYnJvd3NlcnMsIFVURjggaW4gbm9kZSlcbiAqIEBwYXJhbSBpbnB1dFxuICogQHBhcmFtIHVybHNhZmUgLSBpZiB0cnVlIEJhc2U2NCBVUkwgZW5jb2RpbmcgaXMgdXNlZCAoJysnIGFuZCAnLycgYXJlIHJlcGxhY2VkIGJ5ICctJywgJ18nKVxuICogQHBhcmFtIHBhZGRpbmcgLSBpZiBmYWxzZSwgcGFkZGluZyAodHJhaWxpbmcgJz0nKSBpcyByZW1vdmVkXG4gKiBAcmV0dXJucyBhIHN0cmluZyB3aXRoIHRoZSBiYXNlNjQtZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZSAoaW5wdXQ6IEFycmF5QnVmZmVyTGlrZSB8IFR5cGVkQXJyYXkgfCBCdWZmZXIgfCBzdHJpbmcsIHVybHNhZmU6IGJvb2xlYW4gPSBmYWxzZSwgcGFkZGluZzogYm9vbGVhbiA9IHRydWUpOiBzdHJpbmcge1xuICBsZXQgYmFzZTY0ID0gJydcbiAgaWYgKElTX0JST1dTRVIpIHtcbiAgICBjb25zdCBieXRlcyA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuICAgICAgPyAobmV3IFRleHRFbmNvZGVyKCkpLmVuY29kZShpbnB1dClcbiAgICAgIDogbmV3IFVpbnQ4QXJyYXkoaW5wdXQpXG4gICAgYmFzZTY0ID0gYmFzZTY0RW5jb2RlKGJ5dGVzKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ5dGVzID0gKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpXG4gICAgICA/IEJ1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpXG4gICAgICA6IEJ1ZmZlci5mcm9tKGlucHV0KVxuICAgIGJhc2U2NCA9IGJ5dGVzLnRvU3RyaW5nKCdiYXNlNjQnKVxuICB9XG4gIGlmICh1cmxzYWZlKSBiYXNlNjQgPSBiYXNlNjRUb0Jhc2U2NHVybChiYXNlNjQpXG4gIGlmICghcGFkZGluZykgYmFzZTY0ID0gcmVtb3ZlQmFzZTY0UGFkZGluZyhiYXNlNjQpXG4gIHJldHVybiBiYXNlNjRcbn1cblxuLyoqXG4gKiBCYXNlNjR1cmwgZGVjb2RpbmcgKGJpbmFyeSBvdXRwdXQpIG9mIGJhc2U2NHVybC1lbmNvZGVkIHN0cmluZ1xuICogQHBhcmFtIGJhc2U2NCAtIGEgYmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHN0cmluZ091dHB1dCAtIGlmIHRydWUgYSBVVEYxNiAoYnJvd3Nlcikgb3IgVVRGOCAobm9kZSkgc3RyaW5nIGlzIHJldHVybmVkXG4gKiBAcmV0dXJucyBhIGJ1ZmZlciBvciB1bmljb2RlIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZywgc3RyaW5nT3V0cHV0OiB1bmRlZmluZWQpOiBVaW50OEFycmF5XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZywgc3RyaW5nT3V0cHV0OiBmYWxzZSk6IFVpbnQ4QXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUgKGJhc2U2NDogc3RyaW5nLCBzdHJpbmdPdXRwdXQ6IHRydWUpOiBzdHJpbmdcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUgKGJhc2U2NDogc3RyaW5nLCBzdHJpbmdPdXRwdXQ6IGJvb2xlYW4pOiBVaW50OEFycmF5IHwgc3RyaW5nXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZywgc3RyaW5nT3V0cHV0OiB1bmRlZmluZWQgfCBib29sZWFuID0gZmFsc2UpOiBVaW50OEFycmF5IHwgc3RyaW5nIHtcbiAgaWYgKElTX0JST1dTRVIpIHtcbiAgICBsZXQgdXJsc2FmZSA9IGZhbHNlXG4gICAgaWYgKC9eWzAtOWEtekEtWl8tXSs9ezAsMn0kLy50ZXN0KGJhc2U2NCkpIHtcbiAgICAgIHVybHNhZmUgPSB0cnVlXG4gICAgfSBlbHNlIGlmICghL15bMC05YS16QS1aKy9dKj17MCwyfSQvLnRlc3QoYmFzZTY0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSB2YWxpZCBiYXNlNjQgaW5wdXQnKVxuICAgIH1cbiAgICBpZiAodXJsc2FmZSkgYmFzZTY0ID0gYmFzZTY0dXJsVG9CYXNlNjQoYmFzZTY0KVxuICAgIGNvbnN0IGJ5dGVzID0gYmFzZTY0RGVjb2RlKGJhc2U2NClcbiAgICByZXR1cm4gc3RyaW5nT3V0cHV0XG4gICAgICA/IChuZXcgVGV4dERlY29kZXIoKSkuZGVjb2RlKGJ5dGVzKVxuICAgICAgOiBieXRlc1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpXG4gICAgcmV0dXJuIHN0cmluZ091dHB1dFxuICAgICAgPyBidWZmZXIudG9TdHJpbmcoJ3V0ZjgnKVxuICAgICAgOiBuZXcgVWludDhBcnJheShidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmxlbmd0aClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0Jhc2U2NHVybCAoYmFzZTY0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYmFzZTY0LnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NHVybFRvQmFzZTY0IChiYXNlNjR1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBiYXNlNjR1cmwucmVwbGFjZSgvLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKS5yZXBsYWNlKC89L2csICcnKVxufVxuXG5mdW5jdGlvbiByZW1vdmVCYXNlNjRQYWRkaW5nIChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvPS9nLCAnJylcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBTyxNQUFNLFlBQVksR0FBRyxDQUFDLEtBQWlCLEtBQVk7SUFDeEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFBO0lBQ3pCLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLElBQUEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFVBQVUsRUFBRTtRQUVqRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzdFLEtBQUE7SUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDM0IsQ0FBQyxDQUFBO0FBRU0sTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUFlLEtBQWdCO0FBQzFELElBQUEsT0FBTyxJQUFJLFVBQVUsQ0FDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNWLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDVCxTQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUE7QUFDSCxDQUFDOztBQ0tLLFNBQVUsTUFBTSxDQUFFLEtBQXFELEVBQUUsT0FBbUIsR0FBQSxLQUFLLEVBQUUsT0FBQSxHQUFtQixJQUFJLEVBQUE7SUFDOUgsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0FBQ2YsSUFBZ0I7QUFDZCxRQUFBLE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUTtjQUNwQyxDQUFDLElBQUksV0FBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNuQyxjQUFFLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3pCLFFBQUEsTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM3QixLQUtBO0FBQ0QsSUFBQSxJQUFJLE9BQU87QUFBRSxRQUFBLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMvQyxJQUFBLElBQUksQ0FBQyxPQUFPO0FBQUUsUUFBQSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDbEQsSUFBQSxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7U0FZZSxNQUFNLENBQUUsTUFBYyxFQUFFLGVBQW9DLEtBQUssRUFBQTtBQUMvRSxJQUFnQjtRQUNkLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQTtBQUNuQixRQUFBLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sR0FBRyxJQUFJLENBQUE7QUFDZixTQUFBO0FBQU0sYUFBQSxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ2pELFlBQUEsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0FBQzVDLFNBQUE7QUFDRCxRQUFBLElBQUksT0FBTztBQUFFLFlBQUEsTUFBTSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQy9DLFFBQUEsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2xDLFFBQUEsT0FBTyxZQUFZO2NBQ2YsQ0FBQyxJQUFJLFdBQVcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUM7Y0FDakMsS0FBSyxDQUFBO0FBQ1YsS0FLQTtBQUNILENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLE1BQWMsRUFBQTtBQUN4QyxJQUFBLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN2RCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBRSxTQUFpQixFQUFBO0lBQzNDLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzFFLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFFLEdBQVcsRUFBQTtJQUN2QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzlCOzs7OyJ9
