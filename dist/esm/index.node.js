function encode(input, urlsafe = false, padding = true) {
    let base64 = '';
    {
        const bytes = (typeof input === 'string')
            ? Buffer.from(input, 'utf8')
            : Buffer.from(input);
        base64 = bytes.toString('base64');
    }
    if (urlsafe)
        base64 = base64ToBase64url(base64);
    if (!padding)
        base64 = removeBase64Padding(base64);
    return base64;
}
function decode(base64, stringOutput = false) {
    {
        const buffer = Buffer.from(base64, 'base64');
        return stringOutput
            ? buffer.toString('utf8')
            : new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);
    }
}
function base64ToBase64url(base64) {
    return base64.replace(/\+/g, '-').replace(/\//g, '_');
}
function removeBase64Padding(str) {
    return str.replace(/=/g, '');
}

export { decode, encode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzZTY0dXJsIGZvciBib3RoIG5vZGUuanMgYW5kIGJyd3NlciBqYXZhc2NyaXB0LiBJdCBjYW4gd29yayB3aXRoIEFycmF5QnVmZmVyfFR5cGVkQXJyYXl8QnVmZmVyXG4gKlxuICogQHJlbWFya3MgQm93c2VyIGNvZGUgb2J0YWluZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcGFudmEvam9zZS9ibG9iL21haW4vc3JjL3J1bnRpbWUvYnJvd3Nlci9iYXNlNjR1cmwudHNcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbmltcG9ydCB7IGJhc2U2NEVuY29kZSwgYmFzZTY0RGVjb2RlIH0gZnJvbSAnLi9icm93c2VyLWJhc2U2NC5qcydcblxuLyoqXG4gKiBBIFR5cGVkQXJyYXkgb2JqZWN0IGRlc2NyaWJlcyBhbiBhcnJheS1saWtlIHZpZXcgb2YgYW4gdW5kZXJseWluZyBiaW5hcnkgZGF0YSBidWZmZXIuXG4gKi9cbmV4cG9ydCB0eXBlIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgfCBVaW50OEFycmF5IHwgVWludDhDbGFtcGVkQXJyYXkgfCBJbnQxNkFycmF5IHwgVWludDE2QXJyYXkgfCBJbnQzMkFycmF5IHwgVWludDMyQXJyYXkgfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXkgfCBCaWdJbnQ2NEFycmF5IHwgQmlnVWludDY0QXJyYXlcblxuLyoqXG4gKiBCYXNlNjRVcmwgZW5jb2Rpbmcgb2YgYSBidWZmZXIgaW5wdXQgb3IgYSBzdHJpbmcgKFVURjE2IGluIGJyb3dzZXJzLCBVVEY4IGluIG5vZGUpXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEBwYXJhbSB1cmxzYWZlIC0gaWYgdHJ1ZSBCYXNlNjQgVVJMIGVuY29kaW5nIGlzIHVzZWQgKCcrJyBhbmQgJy8nIGFyZSByZXBsYWNlZCBieSAnLScsICdfJylcbiAqIEBwYXJhbSBwYWRkaW5nIC0gaWYgZmFsc2UsIHBhZGRpbmcgKHRyYWlsaW5nICc9JykgaXMgcmVtb3ZlZFxuICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgYmFzZTY0LWVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUgKGlucHV0OiBBcnJheUJ1ZmZlckxpa2UgfCBUeXBlZEFycmF5IHwgQnVmZmVyIHwgc3RyaW5nLCB1cmxzYWZlOiBib29sZWFuID0gZmFsc2UsIHBhZGRpbmc6IGJvb2xlYW4gPSB0cnVlKTogc3RyaW5nIHtcbiAgbGV0IGJhc2U2NCA9ICcnXG4gIGlmIChJU19CUk9XU0VSKSB7XG4gICAgY29uc3QgYnl0ZXMgPSAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJylcbiAgICAgID8gKG5ldyBUZXh0RW5jb2RlcigpKS5lbmNvZGUoaW5wdXQpXG4gICAgICA6IG5ldyBVaW50OEFycmF5KGlucHV0KVxuICAgIGJhc2U2NCA9IGJhc2U2NEVuY29kZShieXRlcylcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBieXRlcyA9ICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuICAgICAgPyBCdWZmZXIuZnJvbShpbnB1dCwgJ3V0ZjgnKVxuICAgICAgOiBCdWZmZXIuZnJvbShpbnB1dClcbiAgICBiYXNlNjQgPSBieXRlcy50b1N0cmluZygnYmFzZTY0JylcbiAgfVxuICBpZiAodXJsc2FmZSkgYmFzZTY0ID0gYmFzZTY0VG9CYXNlNjR1cmwoYmFzZTY0KVxuICBpZiAoIXBhZGRpbmcpIGJhc2U2NCA9IHJlbW92ZUJhc2U2NFBhZGRpbmcoYmFzZTY0KVxuICByZXR1cm4gYmFzZTY0XG59XG5cbi8qKlxuICogQmFzZTY0dXJsIGRlY29kaW5nIChiaW5hcnkgb3V0cHV0KSBvZiBiYXNlNjR1cmwtZW5jb2RlZCBzdHJpbmdcbiAqIEBwYXJhbSBiYXNlNjQgLSBhIGJhc2U2NCBzdHJpbmdcbiAqIEBwYXJhbSBzdHJpbmdPdXRwdXQgLSBpZiB0cnVlIGEgVVRGMTYgKGJyb3dzZXIpIG9yIFVURjggKG5vZGUpIHN0cmluZyBpcyByZXR1cm5lZFxuICogQHJldHVybnMgYSBidWZmZXIgb3IgdW5pY29kZSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZSAoYmFzZTY0OiBzdHJpbmcsIHN0cmluZ091dHB1dDogdW5kZWZpbmVkKTogVWludDhBcnJheVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZSAoYmFzZTY0OiBzdHJpbmcsIHN0cmluZ091dHB1dDogZmFsc2UpOiBVaW50OEFycmF5XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZywgc3RyaW5nT3V0cHV0OiB0cnVlKTogc3RyaW5nXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlIChiYXNlNjQ6IHN0cmluZywgc3RyaW5nT3V0cHV0OiBib29sZWFuKTogVWludDhBcnJheSB8IHN0cmluZ1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZSAoYmFzZTY0OiBzdHJpbmcsIHN0cmluZ091dHB1dDogdW5kZWZpbmVkIHwgYm9vbGVhbiA9IGZhbHNlKTogVWludDhBcnJheSB8IHN0cmluZyB7XG4gIGlmIChJU19CUk9XU0VSKSB7XG4gICAgbGV0IHVybHNhZmUgPSBmYWxzZVxuICAgIGlmICgvXlswLTlhLXpBLVpfLV0rPXswLDJ9JC8udGVzdChiYXNlNjQpKSB7XG4gICAgICB1cmxzYWZlID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoIS9eWzAtOWEtekEtWisvXSo9ezAsMn0kLy50ZXN0KGJhc2U2NCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQgYmFzZTY0IGlucHV0JylcbiAgICB9XG4gICAgaWYgKHVybHNhZmUpIGJhc2U2NCA9IGJhc2U2NHVybFRvQmFzZTY0KGJhc2U2NClcbiAgICBjb25zdCBieXRlcyA9IGJhc2U2NERlY29kZShiYXNlNjQpXG4gICAgcmV0dXJuIHN0cmluZ091dHB1dFxuICAgICAgPyAobmV3IFRleHREZWNvZGVyKCkpLmRlY29kZShieXRlcylcbiAgICAgIDogYnl0ZXNcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShiYXNlNjQsICdiYXNlNjQnKVxuICAgIHJldHVybiBzdHJpbmdPdXRwdXRcbiAgICAgID8gYnVmZmVyLnRvU3RyaW5nKCd1dGY4JylcbiAgICAgIDogbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5sZW5ndGgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CYXNlNjR1cmwgKGJhc2U2NDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGJhc2U2NC5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKVxufVxuXG5mdW5jdGlvbiBiYXNlNjR1cmxUb0Jhc2U2NCAoYmFzZTY0dXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYmFzZTY0dXJsLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJykucmVwbGFjZSgvPS9nLCAnJylcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQmFzZTY0UGFkZGluZyAoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLz0vZywgJycpXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUJNLFNBQVUsTUFBTSxDQUFFLEtBQXFELEVBQUUsT0FBbUIsR0FBQSxLQUFLLEVBQUUsT0FBQSxHQUFtQixJQUFJLEVBQUE7SUFDOUgsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0FBQ2YsSUFLTztBQUNMLFFBQUEsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRO2NBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUM1QixjQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDdEIsUUFBQSxNQUFNLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNsQyxLQUFBO0FBQ0QsSUFBQSxJQUFJLE9BQU87QUFBRSxRQUFBLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMvQyxJQUFBLElBQUksQ0FBQyxPQUFPO0FBQUUsUUFBQSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDbEQsSUFBQSxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7U0FZZSxNQUFNLENBQUUsTUFBYyxFQUFFLGVBQW9DLEtBQUssRUFBQTtBQUMvRSxJQVlPO1FBQ0wsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDNUMsUUFBQSxPQUFPLFlBQVk7QUFDakIsY0FBRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQUN6QixjQUFFLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDcEUsS0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLE1BQWMsRUFBQTtBQUN4QyxJQUFBLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN2RCxDQUFDO0FBTUQsU0FBUyxtQkFBbUIsQ0FBRSxHQUFXLEVBQUE7SUFDdkMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUM5Qjs7OzsifQ==
